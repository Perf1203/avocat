
{
  "entities": {
    "BlogPost": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BlogPost",
      "type": "object",
      "description": "Represents a single blog post article.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the blog post." },
        "slug": { "type": "string", "description": "URL-friendly identifier for the blog post." },
        "title": { "type": "string", "description": "The title of the blog post." },
        "content": { "type": "array", "items": { "type": "string" }, "description": "The content of the blog post, as an array of paragraphs." },
        "imageUrl": { "type": "string", "format": "uri", "description": "URL for the main image of the blog post." },
        "imageHint": { "type": "string", "description": "Hint for AI image generation." },
        "date": { "type": "string", "description": "Publication date of the blog post." },
        "excerpt": { "type": "string", "description": "A short summary of the blog post." }
      },
      "required": ["id", "slug", "title", "content", "imageUrl", "date", "excerpt"]
    },
     "BlogComment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BlogComment",
      "type": "object",
      "description": "Represents a comment on a blog post.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the comment." },
        "postId": { "type": "string", "description": "The ID of the blog post this comment belongs to." },
        "authorId": { "type": "string", "description": "The UID of the comment author." },
        "authorName": { "type": "string", "description": "The name of the comment author." },
        "text": { "type": "string", "description": "The text content of the comment." },
        "timestamp": { "type": "string", "format": "date-time", "description": "Timestamp when the comment was posted." }
      },
      "required": ["postId", "authorId", "authorName", "text", "timestamp"]
    },
     "Testimonial": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Testimonial",
      "type": "object",
      "description": "Represents a client testimonial.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the testimonial." },
        "quote": { "type": "string", "description": "The testimonial text." },
        "author": { "type": "string", "description": "The name of the person giving the testimonial." },
        "title": { "type": "string", "description": "The title or company of the author (e.g., 'CEO, Tech Solutions')." },
        "avatarUrl": { "type": "string", "format": "uri", "description": "URL for the author's avatar image." }
      },
      "required": ["quote", "author", "title"]
    },
    "PracticeArea": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PracticeArea",
      "type": "object",
      "description": "Represents a legal practice area.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the practice area." },
        "icon": { "type": "string", "description": "The name of the lucide-react icon to display." },
        "title": { "type": "string", "description": "The title of the practice area." },
        "description": { "type": "string", "description": "A short description of the practice area." }
      },
      "required": ["icon", "title", "description"]
    },
    "Stat": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Stat",
      "type": "object",
      "description": "Represents a single statistic for the landing page.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the stat." },
        "label": { "type": "string", "description": "The descriptive label for the statistic." },
        "value": { "type": "number", "description": "The numerical value of the statistic." },
        "icon": { "type": "string", "description": "The name of the lucide-react icon to display." },
        "order": { "type": "number", "description": "The display order of the statistic." }
      },
      "required": ["label", "value", "icon", "order"]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents a scheduled appointment.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the appointment."
        },
        "clientId": {
          "type": "string",
          "description": "Reference to Client. (Relationship: Client 1:N Appointment)"
        },
        "startTime": {
          "type": "string",
          "description": "The date and time the appointment is scheduled to begin.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The date and time the appointment is scheduled to end.",
          "format": "date-time"
        },
        "notes": {
          "type": "string",
          "description": "Any notes or relevant information about the appointment."
        },
        "status": {
          "type": "string",
          "description": "The status of the appointment (e.g., scheduled, confirmed, cancelled, completed)."
        }
      },
      "required": [
        "id",
        "clientId",
        "startTime",
        "endTime",
        "status"
      ]
    },
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a client of the law firm.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the client."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the client."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the client."
        },
        "email": {
          "type": "string",
          "description": "The email address of the client.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The phone number of the client."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "phoneNumber"
      ]
    },
    "ConsultationPrice": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConsultationPrice",
      "type": "object",
      "description": "Represents the pricing for consultations.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the price configuration."
        },
        "pricePerHour": {
          "type": "number",
          "description": "The price charged per hour for consultations."
        },
        "flatRate": {
          "type": "number",
          "description": "A flat rate charged for a consultation, regardless of duration."
        },
        "title": {
          "type": "string",
          "description": "Title of the pricing plan (e.g., 'Consultație Inițială')."
        },
        "description": {
          "type": "string",
          "description": "Description of the pricing structure."
        },
        "type": {
          "type": "string",
          "enum": ["flat", "hourly"],
          "description": "Type of pricing."
        }
      },
      "required": [ "id", "title", "description", "type" ]
    },
    "LandingPageContent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LandingPageContent",
      "type": "object",
      "description": "Stores content for the landing page, managed by administrators.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the content section."
        },
        "sectionName": {
          "type": "string",
          "description": "Name of the section on the landing page (e.g., 'Hero', 'About Us')."
        },
        "headline": {
          "type": "string",
          "description": "The main headline text for the section."
        },
        "bodyText": {
          "type": "string",
          "description": "The body text content for the section."
        },
        "callToActionText": {
          "type": "string",
          "description": "The text for the call to action button or link."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the image associated with the section.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "sectionName"
      ]
    },
    "AppSettings": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AppSettings",
      "type": "object",
      "description": "Stores global application settings.",
      "properties": {
        "isPublicRegistrationOpen": {
          "type": "boolean",
          "description": "Controls whether public user registration is open."
        }
      }
    },
    "AdminSettings": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AdminSettings",
      "type": "object",
      "description": "Stores admin-configurable settings for the application.",
      "properties": {
        "websiteName": {
            "type": "string",
            "description": "The public name of the website."
        },
        "appointmentDurationMinutes": {
          "type": "number",
          "description": "The duration of an appointment in minutes, used for cooldown."
        },
        "availableHours": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of available time slots for appointments, e.g., ['09:00', '10:00']."
        },
        "availableDays": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "description": "List of available days of the week, represented by numbers (0=Sunday, 1=Monday, ..., 6=Saturday)."
        },
        "isChatEnabled": {
          "type": "boolean",
          "description": "Globally enables or disables the chat widget."
        },
        "chatType": {
          "type": "string",
          "enum": ["whatsapp", "internal"],
          "description": "Determines the type of chat functionality."
        },
        "whatsAppNumber": {
          "type": "string",
          "description": "The phone number to be used for WhatsApp chat."
        }
      }
    },
    "ChatConversation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatConversation",
      "type": "object",
      "description": "Represents a single chat conversation between a guest and an admin.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the conversation."
        },
        "guestId": {
          "type": "string",
          "description": "The unique ID of the guest user (can be anonymous Firebase UID)."
        },
        "adminId": {
          "type": "string",
          "description": "The UID of the admin assigned to the conversation."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the conversation was created."
        },
        "lastMessageAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the last message sent."
        },
        "lastMessageText": {
          "type": "string",
          "description": "A snippet of the last message for previews."
        },
        "isReadByAdmin": {
          "type": "boolean",
          "description": "Flag to see if admin has read the latest messages."
        },
        "guestName": {
          "type": "string",
          "description": "The optional name provided by the guest."
        },
        "guestEmail": {
          "type": "string",
          "format": "email",
          "description": "The optional email provided by the guest."
        },
        "identificationRequested": {
            "type": "boolean",
            "description": "Flag set by admin to request guest identification."
        },
        "isBlocked": {
          "type": "boolean",
          "description": "If true, the guest associated with this conversation is blocked from using the chat."
        },
        "paymentLink": {
            "type": "string",
            "description": "The payment link sent by the admin to the guest."
        },
        "paymentStatus": {
            "type": "string",
            "enum": ["pending", "paid"],
            "description": "The status of the payment request."
        },
        "paymentRequestedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the payment was requested."
        }
      },
      "required": ["guestId", "adminId", "createdAt", "lastMessageAt"]
    },
    "ChatMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatMessage",
      "type": "object",
      "description": "Represents a single message within a chat conversation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the message."
        },
        "conversationId": {
          "type": "string",
          "description": "The ID of the conversation this message belongs to."
        },
        "senderId": {
          "type": "string",
          "description": "The UID of the message sender (guest or admin)."
        },
        "text": {
          "type": "string",
          "description": "The text content of the message."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the message was sent."
        },
        "isSystemMessage": {
            "type": "boolean",
            "description": "Flag to indicate if the message is a system message."
        },
        "systemMessageType": {
            "type": "string",
            "enum": ["payment_request", "payment_confirmed"],
            "description": "The type of system message."
        },
        "paymentLink": {
            "type": "string",
            "description": "The payment link associated with the system message."
        }
      },
      "required": ["conversationId", "senderId", "text", "timestamp"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/clients/{clientId}",
        "definition": {
          "entityName": "Client",
          "schema": {
            "$ref": "#/backend/entities/Client"
          },
          "description": "Stores client information. Appointments are stored as subcollections. Provides path-based ownership for client data.",
          "params": [
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            }
          ]
        }
      },
      {
        "path": "/clients/{clientId}/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Stores appointment details for a specific client. Uses path-based ownership for security. `clientId` is denormalized from the client document.",
          "params": [
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            },
            {
              "name": "appointmentId",
              "description": "The unique identifier for the appointment."
            }
          ]
        }
      },
       {
        "path": "/blog_posts/{postId}",
        "definition": {
          "entityName": "BlogPost",
          "schema": {
            "$ref": "#/backend/entities/BlogPost"
          },
          "description": "Stores individual blog posts. Publicly readable, admin-writable.",
          "params": [
            {
              "name": "postId",
              "description": "The unique identifier for the blog post."
            }
          ]
        }
      },
      {
        "path": "/blog_posts/{postId}/comments/{commentId}",
        "definition": {
          "entityName": "BlogComment",
          "schema": {
            "$ref": "#/backend/entities/BlogComment"
          },
          "description": "Stores comments for a specific blog post. Requires authentication to write.",
          "params": [
            { "name": "postId", "description": "The blog post ID." },
            { "name": "commentId", "description": "The comment ID." }
          ]
        }
      },
      {
        "path": "/testimonials/{testimonialId}",
        "definition": {
          "entityName": "Testimonial",
          "schema": {
            "$ref": "#/backend/entities/Testimonial"
          },
          "description": "Stores client testimonials. Publicly readable, admin-writable.",
          "params": [
            { "name": "testimonialId", "description": "The unique ID for the testimonial." }
          ]
        }
      },
      {
        "path": "/consultation_prices/{priceId}",
        "definition": {
          "entityName": "ConsultationPrice",
          "schema": {
            "$ref": "#/backend/entities/ConsultationPrice"
          },
          "description": "Stores pricing information for consultations. Accessible and modifiable by admins only.",
          "params": [
            {
              "name": "priceId",
              "description": "The unique identifier for the consultation price."
            }
          ]
        }
      },
      {
        "path": "/practice_areas/{areaId}",
        "definition": {
          "entityName": "PracticeArea",
          "schema": {
            "$ref": "#/backend/entities/PracticeArea"
          },
          "description": "Stores individual practice areas for the landing page. Publicly readable, admin-writable.",
          "params": [
            { "name": "areaId", "description": "The unique ID for the practice area." }
          ]
        }
      },
      {
        "path": "/landing_page_content/{contentId}",
        "definition": {
          "entityName": "LandingPageContent",
          "schema": {
            "$ref": "#/backend/entities/LandingPageContent"
          },
          "description": "Stores content for the landing page.  Accessible and modifiable by admins only.",
          "params": [
            {
              "name": "contentId",
              "description": "The unique identifier for the landing page content."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "role_admin",
          "schema": {
            "$ref": "#/backend/entities/Client"
          },
          "description": "Documents in this collection grant admin access. Existence of a document indicates admin role. Used for global role management.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/app_settings/{settingId}",
        "definition": {
          "entityName": "AppSettings",
          "schema": {
            "$ref": "#/backend/entities/AppSettings"
          },
          "description": "Stores global application settings. Accessible and modifiable by admins only. Should contain a single document with id 'registration'.",
          "params": [
            {
              "name": "settingId",
              "description": "The unique identifier for the setting document."
            }
          ]
        }
      },
      {
        "path": "/admin_settings/{settingId}",
        "definition": {
          "entityName": "AdminSettings",
          "schema": {
            "$ref": "#/backend/entities/AdminSettings"
          },
          "description": "Stores admin-configurable settings. Should contain a single document with id 'schedule'.",
          "params": [
            {
              "name": "settingId",
              "description": "The unique identifier for the setting document."
            }
          ]
        }
      },
      {
        "path": "/conversations/{conversationId}",
        "definition": {
          "entityName": "ChatConversation",
          "schema": {
            "$ref": "#/backend/entities/ChatConversation"
          },
          "description": "Stores metadata for a single chat conversation between a guest and an admin.",
          "params": [
            {
              "name": "conversationId",
              "description": "The unique identifier for the chat conversation."
            }
          ]
        }
      },
      {
        "path": "/conversations/{conversationId}/messages/{messageId}",
        "definition": {
          "entityName": "ChatMessage",
          "schema": {
            "$ref": "#/backend/entities/ChatMessage"
          },
          "description": "Stores the individual messages for a specific conversation.",
          "params": [
            {
              "name": "conversationId",
              "description": "The unique identifier for the chat conversation."
            },
            {
              "name": "messageId",
              "description": "The unique identifier for the chat message."
            }
          ]
        }
      },
      {
        "path": "/stats/{statId}",
        "definition": {
          "entityName": "Stat",
          "schema": {
            "$ref": "#/backend/entities/Stat"
          },
          "description": "Stores a single statistic for the landing page. Publicly readable, admin-writable.",
          "params": [
            {
              "name": "statId",
              "description": "The unique identifier for the statistic."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to accommodate the application's requirements for appointment scheduling, landing page content management, and dynamic content suggestions. It prioritizes authorization independence and supports secure list operations (QAPs). \n\n1.  **Authorization Independence:** Access to appointments is controlled through path-based ownership. Each client's appointments are stored under their own document (`/clients/{clientId}/appointments/{appointmentId}`). Administrative access is granted via the `/roles_admin/{uid}` collection.  This eliminates the need for `get()` calls in security rules, ensuring atomic operations.\n\n2.  **Structural Segregation:**  `ConsultationPrice`, `LandingPageContent`, `AppSettings`, `Testimonial`, `PracticeArea`, and `Stat` are placed in separate collections with distinct security profiles. This ensures that data with different access needs is not mixed, simplifying security rules.\n\n3.  **Access Modeling:**  Path-based ownership is employed for `Client` and `Appointment` data. The `roles_admin` collection uses existence-based global roles.\n\n4.  **QAPs (Rules Are Not Filters):** Segregating data based on ownership allows for efficient and secure list operations. For instance, a client can only list appointments under their `clientId`, and admins can list all appointments.\n\nDenormalization is not explicitly required in this design because path-based ownership provides sufficient authorization context without needing to copy data. If, in the future, more complex authorization schemes are introduced (e.g., sharing appointments with other users), denormalization of a `members` map into the `/clients/{clientId}/appointments/{appointmentId}` collection would be necessary."
  }
}
