/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for client data and restricts admin-only access for consultation prices and landing page content.
 *
 * Data Structure:
 * - /clients/{clientId}: Stores client information, with appointments as subcollections.
 * - /clients/{clientId}/appointments/{appointmentId}: Stores appointment data for specific clients.
 * - /consultation_prices/{priceId}: Stores consultation pricing, accessible only to admins.
 * - /landing_page_content/{contentId}: Stores landing page content, accessible only to admins.
 * - /roles_admin/{userId}: Presence of a document indicates admin role.
 *
 * Key Security Decisions:
 * - Clients can only access their own data and appointments.
 * - Listing all clients or appointments is disallowed to prevent data leakage.
 * - Consultation prices and landing page content are only accessible to admins.
 * - Admin status is determined by the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Denormalization for Authorization:
 *   - Path-based ownership is used for clients and appointments, avoiding the need for denormalization or extra `get()` calls.
 *   - Admin status is checked via the `isAdmin()` function, which uses `getAfter()` to verify the role.
 *
 * Structural Segregation:
 *   - Consultation prices and landing page content are stored in separate collections to enforce distinct admin-only access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {bool} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {bool} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner. Combines ownership check with existence check.
     * @param {string} userId - The user ID to compare against.
     * @returns {bool} True if the user ID matches the authenticated user's ID and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has admin privileges.
     * @returns {bool} True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && existsAfter(/databases/(default)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /clients/{clientId} collection.
     * @path /clients/{clientId}
     * @allow (create) - Authenticated user can create a client document if the client ID matches their UID.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete a client document if the client ID matches their UID.
     * @deny (create) - Unauthenticated user cannot create a client document.
     * @deny (update) - Authenticated user cannot update a client document if the client ID does not match their UID.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId} {
      allow get: if isOwner(clientId);
      allow list: if false;
      allow create: if isOwner(clientId) && request.resource.data.id == clientId;
      allow update: if isExistingOwner(clientId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Rules for the /clients/{clientId}/appointments/{appointmentId} collection.
     * @path /clients/{clientId}/appointments/{appointmentId}
     * @allow (create) - Authenticated user can create an appointment under their client document if the client ID matches their UID.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete an appointment under their client document if the client ID matches their UID.
     * @deny (create) - Unauthenticated user cannot create an appointment.
     * @deny (update) - Authenticated user cannot update an appointment if the client ID does not match their UID.
     * @principle Enforces document ownership for writes and relational integrity.
     */
    match /clients/{clientId}/appointments/{appointmentId} {
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId) && request.resource.data.clientId == clientId;
      allow update: if isExistingOwner(clientId) && request.resource.data.clientId == clientId;
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Rules for the /consultation_prices/{priceId} collection.
     * @path /consultation_prices/{priceId}
     * @allow (get, list) - Any user can read consultation prices.
     * @allow (create, update, delete) - Only admins can create, update, or delete consultation prices.
     * @deny (create) - Non-admin user cannot create consultation prices.
     * @principle Restricts write access to admins only.
     */
    match /consultation_prices/{priceId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /landing_page_content/{contentId} collection.
     * @path /landing_page_content/{contentId}
     * @allow (get, list) - Any user can read landing page content.
     * @allow (create, update, delete) - Only admins can create, update, or delete landing page content.
     * @deny (create) - Non-admin user cannot create landing page content.
     * @principle Restricts write access to admins only.
     */
    match /landing_page_content/{contentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow (get) - Allows a user to check if they are an admin.
     * @allow (create) - Allows admin role document to be created.
     * @allow (update, delete) - Only allow admins to update or delete other admins
     * @deny (create) - Non-admin user cannot grant themselves admin access.
     * @principle Restricts write access to admins only.
     */
    match /roles_admin/{userId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isAdmin() && isOwner(userId);
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
  }
}