/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client data and uses
 * global roles for admin-managed content.  It leverages path-based authorization
 * and existence-based role checks to minimize reads in the security rules.
 *
 * Data Structure:
 * - /clients/{clientId}: Stores client profiles. Each client can only access their own profile.
 * - /clients/{clientId}/appointments/{appointmentId}: Stores appointments for each client. Only the client can access their appointments.
 * - /consultation_prices/{priceId}: Stores consultation pricing, only accessible by admins.
 * - /landing_page_content/{contentId}: Stores landing page content, only accessible by admins.
 * - /roles_admin/{userId}: Indicates admin privileges. The existence of a document grants admin access.
 *
 * Key Security Decisions:
 * - Clients have full ownership of their profile and appointments.
 * - Admin access is granted via the /roles_admin/{userId} collection.
 * - Data types and schema are not strictly validated in this prototyping phase for quicker iteration.
 *
 * Denormalization for Authorization:
 * Path-based ownership is used for clients and appointments, eliminating the need for denormalization.
 * The `roles_admin` collection uses existence-based role assignment, so no data needs to be denormalized into other documents.
 *
 * Structural Segregation:
 * Consultation prices and landing page content are stored in separate collections
 * to clearly separate admin-managed data from user-owned data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the user is signed in and the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * @return {boolean} True if the user has a document in the /roles_admin/{uid} collection, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is an existing owner (signed in, is owner, and the document exists).
     * @param {string} userId - The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the user is an existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /clients/{clientId} collection.
     * @path /clients/{clientId}
     * @allow (create) - Authenticated user can create their own client document if the client ID matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can access/modify their own client document if the client ID matches their auth UID.
     * @deny (create) - An unauthenticated user cannot create a client document.
     * @deny (update, delete) - An unauthenticated user cannot modify a client document.
     * @deny (get) - An unauthenticated user cannot read a client document.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId} {
      allow get: if isOwner(clientId);
      allow list: if false; // Listing clients is not permitted

      allow create: if isOwner(clientId) && request.resource.data.id == clientId;
      allow update: if isExistingOwner(clientId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Rules for the /clients/{clientId}/appointments/{appointmentId} collection.
     * @path /clients/{clientId}/appointments/{appointmentId}
     * @allow (create) - Authenticated user can create an appointment under their client document if the client ID matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can access/modify their own appointment under their client document if the client ID matches their auth UID.
     * @deny (create) - An unauthenticated user cannot create an appointment.
     * @deny (update, delete) - An unauthenticated user cannot modify an appointment.
     *  @principle Enforces document ownership for writes.
     */
    match /clients/{clientId}/appointments/{appointmentId} {
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);

      allow create: if isOwner(clientId) && request.resource.data.clientId == clientId;
      allow update: if isExistingOwner(clientId) && request.resource.data.clientId == resource.data.clientId;
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Rules for the /consultation_prices/{priceId} collection.
     * @path /consultation_prices/{priceId}
     * @allow (get, list) - Only admins can read consultation prices.
     * @allow (create, update, delete) - Only admins can modify consultation prices.
     * @deny (get, list) - Non-admins cannot read consultation prices.
     * @deny (create, update, delete) - Non-admins cannot modify consultation prices.
     * @principle Restricts access to admin-managed data using global roles.
     */
    match /consultation_prices/{priceId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /landing_page_content/{contentId} collection.
     * @path /landing_page_content/{contentId}
     * @allow (get, list) - Only admins can read landing page content.
     * @allow (create, update, delete) - Only admins can modify landing page content.
     * @deny (get, list) - Non-admins cannot read landing page content.
     * @deny (create, update, delete) - Non-admins cannot modify landing page content.
     * @principle Restricts access to admin-managed data using global roles.
     */
    match /landing_page_content/{contentId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow (get, list) - Only admins can view the admin roles.
     * @allow (create, update, delete) - Only admins can manage admin roles.
     * @deny (get, list) - Non-admins cannot view admin roles.
     * @deny (create, update, delete) - Non-admins cannot manage admin roles.
     * @principle Restricts access to admin-managed data using global roles.
     */
     match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false; // Listing admin roles is not permitted.
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
     }
  }
}