rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is signed in and their UID matches the provided userId, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in /roles_admin/{userId}.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and that the resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is signed in, their UID matches the provided userId, and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.data.id);
    }

    /**
     * @description Defines custom claims that can be assigned to users with admin role.
     * @returns {boolean} True if the user has the claim 'admin', false otherwise.
     */
    function isAdminClaim() {
        return request.auth.token.admin == true;
    }

    /**
     * @description Checks if the request is from an admin or if the guest is trying to access their own conversation.
     * @param {string} guestId - The guest ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function canAccessConversation(guestId) {
      return isAdmin() || (isSignedIn() && request.auth.uid == guestId);
    }
    

    /**
     * @description Rule for the /clients/{clientId} collection.
     * @path /clients/{clientId}
     * @allow (create) - A user with UID 'user_abc' can create a client document where clientId == 'user_abc'.
     * @deny (create) - A user with UID 'user_abc' cannot create a client document where clientId != 'user_abc'.
     * @allow (get, list, update, delete) - A user with UID 'user_abc' can get, list, update, or delete their own client document (where clientId == 'user_abc').
     * @deny (get, list, update, delete) - A user with UID 'user_xyz' cannot get, list, update, or delete the client document of 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId} {
      allow create: if isSignedIn() && request.auth.uid == clientId;
      allow get, list: if isSignedIn() && request.auth.uid == clientId;
      allow update: if isSignedIn() && request.auth.uid == clientId;
      allow delete: if isSignedIn() && request.auth.uid == clientId;
    }

    /**
     * @description Rule for the /clients/{clientId}/appointments/{appointmentId} collection.
     * @path /clients/{clientId}/appointments/{appointmentId}
     * @allow (create) - A user with UID 'user_abc' can create an appointment document under their client document (clientId == 'user_abc').
     * @deny (create) - A user with UID 'user_abc' cannot create an appointment document under a different client document (clientId != 'user_abc').
     * @allow (get, list, update, delete) - A user with UID 'user_abc' can get, list, update, or delete their own appointment documents (under clientId == 'user_abc').
     * @deny (get, list, update, delete) - A user with UID 'user_xyz' cannot get, list, update, or delete the appointment documents of 'user_abc'.
     * @principle Enforces document ownership and relational integrity for appointments.
     */
    match /clients/{clientId}/appointments/{appointmentId} {
      allow create: if isSignedIn() && request.auth.uid == clientId;
      allow get, list: if isSignedIn() && request.auth.uid == clientId;
      allow update: if isSignedIn() && request.auth.uid == clientId;
      allow delete: if isSignedIn() && request.auth.uid == clientId;
    }

    /**
     * @description Rule for the /blog_posts/{postId} collection.
     * @path /blog_posts/{postId}
     * @allow (get, list) - Any user (signed in or not) can read blog posts.
     * @allow (create, update, delete) - Only admins can create, update, or delete blog posts.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete blog posts.
     * @principle Allows public read access with admin-only write access.
     */
    match /blog_posts/{postId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rule for the /blog_posts/{postId}/comments/{commentId} collection.
     * @path /blog_posts/{postId}/comments/{commentId}
     * @allow (get, list) - Any user can read comments on blog posts.
     * @allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
     * @allow update: if isSignedIn() && request.resource.data.authorId == request.auth.uid && resource.data.authorId == request.auth.uid;
     * @allow delete: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
     * @deny (create) - An unauthenticated user cannot create a comment.
     * @principle Requires authentication to create comments.
     */
    match /blog_posts/{postId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == resource.data.authorId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.authorId;
    }

    /**
     * @description Rule for the /testimonials/{testimonialId} collection.
     * @path /testimonials/{testimonialId}
     * @allow (get, list) - Any user (signed in or not) can read testimonials.
     * @allow (create, update, delete) - Only admins can create, update, or delete testimonials.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete testimonials.
     * @principle Allows public read access with admin-only write access.
     */
    match /testimonials/{testimonialId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rule for the /consultation_prices/{priceId} collection.
     * @path /consultation_prices/{priceId}
     * @allow (get, list, create, update, delete) - Only admins can access and modify consultation prices.
     * @deny (get, list, create, update, delete) - Non-admins cannot access or modify consultation prices.
     * @principle Restricts access to consultation prices to admins only.
     */
    match /consultation_prices/{priceId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Rule for the /practice_areas/{areaId} collection.
     * @path /practice_areas/{areaId}
     * @allow (get, list) - Any user (signed in or not) can read practice areas.
     * @allow (create, update, delete) - Only admins can create, update, or delete practice areas.
     * @deny (get, list, create, update, delete) - Non-admins cannot access or modify practice areas.
     * @principle Allows public read access with admin-only write access.
     */
    match /practice_areas/{areaId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rule for the /landing_page_content/{contentId} collection.
     * @path /landing_page_content/{contentId}
     * @allow (get, list, create, update, delete) - Only admins can access and modify landing page content.
     * @deny (get, list, create, update, delete) - Non-admins cannot access or modify landing page content.
     * @principle Restricts access to landing page content to admins only.
     */
    match /landing_page_content/{contentId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Rule for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId; // Anyone can create a document with their own UID (for admin assignment).
     * @allow get: if isSignedIn() && request.auth.uid == userId;  // Anyone can check if they are an admin.
     * @allow list: if false; // Nobody can list admins.
     * @allow update: if false; // Admin documents are managed server-side, not client-side.
     * @allow delete: if false; // Admin documents are managed server-side, not client-side.
     * @principle Uses document existence to grant admin privileges.
     */
    match /roles_admin/{userId} {
        allow create: if isSignedIn() && request.auth.uid == userId;
        allow get: if isSignedIn() && request.auth.uid == userId;
        allow list: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rule for the /app_settings/{settingId} collection.
     * @path /app_settings/{settingId}
     * @allow (get, list, create, update, delete) - Only admins can access and modify app settings.
     * @deny (get, list, create, update, delete) - Non-admins cannot access or modify app settings.
     * @principle Restricts access to app settings to admins only.
     */
    match /app_settings/{settingId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Rule for the /admin_settings/{settingId} collection.
     * @path /admin_settings/{settingId}
     * @allow (get, list, create, update, delete) - Only admins can access and modify admin settings.
     * @deny (get, list, create, update, delete) - Non-admins cannot access or modify admin settings.
     * @principle Restricts access to admin settings to admins only.
     */
    match /admin_settings/{settingId} {
      allow get, list, create, update, delete: if isAdmin();
    }
    
    /**
     * @description Rule for the /conversations/{conversationId} collection.
     * @path /conversations/{conversationId}
     * @allow get: if canAccessConversation(resource.data.guestId);
     * @allow list: if isAdmin();
     * @allow create: if isSignedIn() && request.resource.data.guestId == request.auth.uid && request.resource.data.adminId != null;
     * @allow update: if isAdmin();
     * @allow delete: if false;
     * @principle Allows admins to manage conversations and guests to access their own.
     */
    match /conversations/{conversationId} {
      allow get: if canAccessConversation(resource.data.guestId);
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.guestId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if false;
    }

    /**
     * @description Rule for the /conversations/{conversationId}/messages/{messageId} collection.
     * @path /conversations/{conversationId}/messages/{messageId}
     * @allow get: if canAccessConversation(get(/databases/$(database)/documents/conversations/$(conversationId)).data.guestId);
     * @allow list: if canAccessConversation(get(/databases/$(database)/documents/conversations/$(conversationId)).data.guestId);
     * @allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows guests and admins to read and write messages in their conversations.
     */
    match /conversations/{conversationId}/messages/{messageId} {
      allow get, list: if canAccessConversation(get(/databases/$(database)/documents/conversations/$(conversationId)).data.guestId);
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}