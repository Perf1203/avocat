/**
 * @fileoverview Firestore Security Rules for the Law Firm application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client data and their appointments.
 * Administrative privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 * Landing page content and consultation prices are only modifiable by admins.
 *
 * Data Structure:
 * - /clients/{clientId}: Stores client profiles. Each client has a unique ID.
 * - /clients/{clientId}/appointments/{appointmentId}: Stores appointments associated with a specific client.
 * - /consultation_prices/{priceId}: Stores consultation pricing information.
 * - /landing_page_content/{contentId}: Stores content for the landing page.
 * - /roles_admin/{userId}: Documents that exist in this collection designate the user as an administrator.
 *
 * Key Security Decisions:
 * - Clients can only access their own data (clients collection) and their associated appointments.
 * - Listing all clients is disallowed.
 * - Consultation prices and landing page content can only be modified by administrators.
 * - Existence in `/roles_admin/{userId}` collection confers admin privileges.
 *
 * Denormalization for Authorization:
 * - Path-based ownership is used to avoid `get()` calls for authorization, ensuring rules are efficient and scalable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to client documents based on ownership.
     * @path /clients/{clientId}
     * @allow (create) - A user can create their own client document if the userId matches the clientId.
     *           e.g., request.auth.uid = "user123", resource.data.id = "user123"
     * @allow (get, list, update, delete) - A user can only access their own client data.
     *           e.g., request.auth.uid = "user123", clientId = "user123"
     * @deny  (create) - A user cannot create a client document with an ID that doesn't match their own user ID.
     *           e.g., request.auth.uid = "user123", resource.data.id = "user456"
     * @deny  (get, list, update, delete) - A user cannot access another client's data.
     *           e.g., request.auth.uid = "user123", clientId = "user456"
     * @principle Enforces document ownership for reads and writes.
     */
    match /clients/{clientId} {
      function isOwner(clientId) {
        return request.auth != null && request.auth.uid == clientId;
      }

      function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }

      allow get: if isOwner(clientId);
      allow list: if false;
      allow create: if isOwner(clientId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(clientId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Grants access to appointment documents based on client ownership.
     * @path /clients/{clientId}/appointments/{appointmentId}
     * @allow (create, get, list, update, delete) - A user can only manage appointments associated with their own client ID.
     *           e.g., request.auth.uid = "user123", clientId = "user123"
     * @deny  (create, get, list, update, delete) - A user cannot manage appointments associated with another client's ID.
     *           e.g., request.auth.uid = "user123", clientId = "user456"
     * @principle Enforces document ownership for reads and writes within a subcollection.
     */
    match /clients/{clientId}/appointments/{appointmentId} {
      function isOwner(clientId) {
        return request.auth != null && request.auth.uid == clientId;
      }

       function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }

      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Grants admin access to consultation price documents.
     * @path /consultation_prices/{priceId}
     * @allow (create, get, list, update, delete) - Only administrators can manage consultation prices.
     *           e.g., request.auth.uid is an admin.
     * @deny  (create, get, list, update, delete) - Regular users cannot manage consultation prices.
     *           e.g., request.auth.uid is not an admin.
     * @principle Restricts modification of consultation prices to administrators.
     */
    match /consultation_prices/{priceId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin access to landing page content documents.
     * @path /landing_page_content/{contentId}
     * @allow (create, get, list, update, delete) - Only administrators can manage landing page content.
     *           e.g., request.auth.uid is an admin.
     * @deny  (create, get, list, update, delete) - Regular users cannot manage landing page content.
     *           e.g., request.auth.uid is not an admin.
     * @principle Restricts modification of landing page content to administrators.
     */
    match /landing_page_content/{contentId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin role based on the existence of a document with the user's ID.
     * @path /roles_admin/{userId}
     * @allow (create) - Only allow the server to create admin roles.
     * @allow (get) - Any authenticated user can check if they have admin role.
     * @deny (list, update, delete) - Listing, updating, and deleting admin roles are disallowed.
     * @principle Uses document existence to define admin privileges.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}