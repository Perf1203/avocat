/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset implements a strict, path-based ownership model for user data
 * and an admin-only model for managing consultation prices and landing page content.
 *
 * Data Structure:
 * - /clients/{clientId}: Stores client information.
 * - /clients/{clientId}/appointments/{appointmentId}: Stores appointments for each client.
 * - /consultation_prices/{priceId}: Stores consultation pricing (admin only).
 * - /landing_page_content/{contentId}: Stores landing page content (admin only).
 * - /roles_admin/{userId}: Presence of document indicates admin status.
 *
 * Key Security Decisions:
 * - Clients can only access their own data and appointments.
 * - Only admins can manage consultation prices and landing page content.
 * - Listing appointments is restricted to the client owning the appointments.
 *
 * Denormalization for Authorization:
 * - None currently. Path-based ownership is sufficient. Consider denormalizing
 *   a `members` map into appointments if sharing features are added later.
 *
 * Structural Segregation:
 * - ConsultationPrice and LandingPageContent are in separate collections to
 *   enforce different security profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource based on the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource based on the provided userId.
     * Use this function for `update` and `delete` requests to prevent modifying non-existent documents.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin by verifying the existence of a document in the roles_admin collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /clients/{clientId} collection.
     * @path /clients/{clientId}
     * @allow (create) - A user with uid 'user123' can create a client document if request.auth.uid == 'user123'.
     * @allow (get, list) - A user with uid 'user123' can read a client document if request.auth.uid == 'user123'.
     * @allow (update, delete) - A user with uid 'user123' can update or delete a client document if request.auth.uid == 'user123' and the document exists.
     * @deny (create) - A user with uid 'user456' cannot create a client document with ID 'user123'.
     * @principle Enforces document ownership for writes and restricts read access to the owner.
     */
    match /clients/{clientId} {
      allow get: if isOwner(clientId);
      allow list: if false;
      allow create: if isOwner(clientId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(clientId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Rules for the /clients/{clientId}/appointments/{appointmentId} collection.
     * @path /clients/{clientId}/appointments/{appointmentId}
     * @allow (create) - A user with uid 'user123' can create an appointment under /clients/user123/appointments if request.auth.uid == 'user123'.
     * @allow (get, list) - A user with uid 'user123' can read appointments under /clients/user123/appointments if request.auth.uid == 'user123'.
     * @allow (update, delete) - A user with uid 'user123' can update or delete an appointment under /clients/user123/appointments if request.auth.uid == 'user123' and the document exists.
     * @deny (create) - A user with uid 'user456' cannot create an appointment under /clients/user123/appointments.
     * @principle Enforces document ownership for writes and restricts read access to the owner.
     */
    match /clients/{clientId}/appointments/{appointmentId} {
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Rules for the /consultation_prices/{priceId} collection.
     * @path /consultation_prices/{priceId}
     * @allow (get, list) - Any authenticated user can read consultation prices.
     * @allow (create, update, delete) - Only admins can create, update, or delete consultation prices.
     * @deny (create) - A non-admin user cannot create a consultation price.
     * @principle Restricts write access to admins only.
     */
    match /consultation_prices/{priceId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /landing_page_content/{contentId} collection.
     * @path /landing_page_content/{contentId}
     * @allow (get, list) - Any authenticated user can read landing page content.
     * @allow (create, update, delete) - Only admins can create, update, or delete landing page content.
     * @deny (create) - A non-admin user cannot create landing page content.
     * @principle Restricts write access to admins only.
     */
    match /landing_page_content/{contentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow (get) - Any authenticated user can get a role.
     * @allow (list) - Listing is not allowed.
     * @allow (create, update, delete) - Only admins can create, update or delete roles.
     * @deny (create) - A non-admin cannot grant themself admin.
     * @principle Restricts write access to admins only, and read access to all.
     */
    match /roles_admin/{userId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create, update, delete: if isAdmin();
    }
  }
}